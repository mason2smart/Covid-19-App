{"version":3,"sources":["assets/images/clinician.png","assets/images/ventilator.png","assets/images/PPE.png","constants/Colors.js","components/TabBarIcon.js","config.js","screens/HomeScreen.js","screens/AboutScreen.js","navigation/BottomTabNavigator.js","components/MyButton.js","screens/ClinicianScreen.js","screens/VideoTutorialsScreen.js","components/MyVideoForTutorial.js","components/VideoTutorial.js","screens/ResourcesScreen.js","components/ButtonScreen.js","components/MyCheckbox.js","components/MyImage.js","components/Accordion.js","components/CPRContent.js","screens/VentilationScreen.js","components/MyVideoForVent.js","components/Ventilator.js","App.js","navigation/useLinking.js","web-build/register-service-worker.js","assets/images/splash.png","assets/fonts/SpaceMono-Regular.ttf","assets/fonts/FiraSans-Italic.ttf","assets/fonts/FiraSans-Regular.ttf","assets/fonts/FiraSans-BoldItalic.ttf","assets/fonts/FiraSans-Bold.ttf","assets/fonts/FiraSans-Medium.ttf","assets/fonts/FiraSans-MediumItalic.ttf","assets/fonts/AvenirLTStd-Black.otf","assets/fonts/AvenirLTStd-Book.otf","assets/fonts/AvenirLTStd-Roman.otf"],"names":["module","exports","TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","app","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","storage","database","HomeScreen","navigation","useState","timeData","setData","useEffect","a","async","ref","once","snapshot","data","val","console","warn","getData","homeObjects","require","View","styles","container","contentContainerStyle","contentContainer","titleContainer","Image","source","titleImage","Text","titleText","buttonContainer","k","buttonList","map","screen","image","buttonName","push","TouchableOpacity","buttonStyle","key","onPress","navigate","buttonIcon","buttonText","marginLeft","buttonText2","timeText","String","createButtons","StyleSheet","create","flex","backgroundColor","marginTop","fontSize","textAlign","width","height","resizeMode","flexDirection","marginVertical","alignItems","justifyContent","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","paddingHorizontal","paddingBottom","paddingTop","tabBarInfoContainer","position","bottom","left","right","Platform","select","ios","android","paddingVertical","tabBarInfoText","AboutScreen","optionText","optionIconContainer","marginRight","option","borderWidth","hairlineWidth","borderBottomWidth","borderColor","lastOption","alignSelf","BottomTab","createBottomTabNavigator","BottomTabNavigator","route","setOptions","headerTitle","getHeaderTitle","Navigator","initialRouteName","Screen","component","options","title","tabBarIcon","state","routes","index","MyButton","useNavigation","content","page","nextScreen","lineHeight","ClinicianScreen","cprData","Array","Object","keys","length","entries","value","replace","order","VideoTutorialsScreen","tutorData","MyVideo","OS","uri","video","src","frameborder","allow","allowfullscreen","webVideo","playerRef","useRef","playing","videoId","play","onChangeState","event","log","onReady","onError","e","onPlaybackQualityChange","q","volume","playbackRate","playerParams","cc_lang_pref","showClosedCaptions","appVideo","margin","VideoTutorial","params","videoData","snap","componentsList","type","createObjects","subtitleText","undefined","aspectRatio","ResourcesScreen","icon","label","WebBrowser","isLastOption","OptionButton","optionTextContainer","fontWeight","marginHorizontal","ButtonScreen","pageData","path","concat","MyCheckbox","isChecked","paddingLeft","this","offset","rightText","rightTextStyle","text","onClick","setState","Component","windowHeight","Dimensions","get","windowWidth","MyImage","cropWidth","cropHeight","imageWidth","imageHeight","webImage","imageBackgroundColor","appImage","Accordion","toggleExpand","expanded","bulletPoint","padding","split","item","checkboxes","row","colorRow","font","parentHr","child","colorChild","link","propTypes","PropTypes","string","defaultProps","paddingRight","CPRContent","scrollContainer","bulletPoints","alignContent","VentilationScreen","ventData","timestamps","ScrollView","timeStamp","skipTo","current","seekTo","createButtonsApp","Ventilator","Stack","createStackNavigator","App","React","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","screens","Home","Links","Settings","SplashScreen","preventAutoHide","Font","hide","StatusBar","barStyle","skipLoadingScreen","NavigationContainer","initialState","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.c30be987.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clinician.ef06a45b.png\";","module.exports = __webpack_public_path__ + \"static/media/ventilator.2916251d.png\";","module.exports = __webpack_public_path__ + \"static/media/PPE.287ebc48.png\";","const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\n\nexport default function TabBarIcon(props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  );\n}\n","import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAS257cb6HUCS2UmxOUOjEGeFttAxcXnVE\",\n  authDomain: \"covid-reference.firebaseapp.com\",\n  databaseURL: \"https://covid-reference.firebaseio.com\",\n  projectId: \"covid-reference\",\n  storageBucket: \"covid-reference.appspot.com\",\n  messagingSenderId: \"275615521425\",\n  appId: \"1:275615521425:web:08f50c7983945c70a3bd30\",\n  measurementId: \"G-FM96JGK28C\"\n};\n\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const storageRef = app.storage();\nexport const db = app.database();\n","import * as WebBrowser from 'expo-web-browser';\nimport React, { useEffect, useState } from \"react\";\nimport { Image, Button, Platform, StyleSheet, Text, View, Alert, TouchableOpacity} from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Ionicons } from '@expo/vector-icons';\nimport { db } from \"../config\";\n\nexport default function HomeScreen({navigation}) {\n  const [timeData, setData] = useState({});\n\n  async function getData() {\n    try {\n      const snapshot = await db.ref(\"Update_Time/\").once(\"value\");\n      let data = snapshot.val();\n      setData(data);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const image1 = require('../assets/images/clinician.png');\n  const image2 = require('../assets/images/ventilator.png');\n  const image3 = require('../assets/images/PPE.png');\n\n  const homeObjects = [\n    ['Clinician Pocket Reference', image1, 'Clinician Reference'], \n    ['Ventilation', image2, 'Ventilation'], \n    ['Tutorscreen', image3, 'Video Tutorials']\n  ];\n\n  function createButtons() {\n    let k =0 ;\n    let buttonList = [];\n    homeObjects.map(([screen, image, buttonName]) => {\n      buttonList.push(\n        <TouchableOpacity\n          style={styles.buttonStyle}\n          key = {k++}\n          onPress={() => navigation.navigate(screen)}\n        >\n\n          <Image\n            source={image}\n            style={styles.buttonIcon}\n          />\n\n          <Text style={styles.buttonText}>{buttonName}</Text>\n\n        </TouchableOpacity>\n      );\n    });\n\n    buttonList.push(\n      <TouchableOpacity\n        style={styles.buttonStyle}\n        key = {k++}\n        onPress={() => navigation.navigate('Resources')}\n      >\n        <Ionicons\n          name={\"md-information-circle-outline\"}\n          size={30}\n          style={styles.buttonIcon}\n          style= {{marginLeft: 32}}\n        />\n\n        <Text style={styles.buttonText2}>Resources</Text>\n      </TouchableOpacity>\n    );\n    \n    buttonList.push(\n      <View style={styles.contentContainer} key = {k++}>\n        <Text style={styles.timeText}>{String(timeData)}</Text>\n      </View>\n    );\n\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n        <View style={styles.titleContainer}>\n\n          <Image\n            source={require('../assets/images/splash.png')}\n            style={styles.titleImage}\n          />\n\n          <Text style={styles.titleText}>\n            COVID-19 {\"\\n\"}Pocket Reference\n          </Text>\n\n          <View style={styles.buttonContainer}>\n            {createButtons()}\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  titleText: {\n    marginTop: 20,\n    marginBottom: 10,\n    fontSize: 36,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman',\n  },\n  buttonContainer: {\n  },\n  buttonIcon:{\n    marginLeft: 25,\n    width:40,\n    height:40,\n    resizeMode: 'contain',\n  },\n  buttonStyle: {\n    flexDirection: 'row',\n    marginVertical: 8,\n    alignItems:'center',\n    justifyContent:'flex-start',\n    width:300,\n    height:70,\n    backgroundColor: '#F2F2F2',\n    borderRadius:20,\n    shadowColor: 'rgba(0,0,0, .4)', // IOS\n    shadowOffset: { height: 1, width: 0 }, // IOS\n    shadowOpacity: 1, // IOS\n    shadowRadius: 1, //IOS\n    elevation: 1, // Android\n  },\n  buttonText: {\n    color: 'black',\n    fontSize: 20,\n    marginLeft: 10,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman',\n    paddingHorizontal: 20,\n    // paddingTop: 10, //only use with Avenir-roman\n\n  },\n  timeText: {\n    paddingBottom: 0,\n    marginTop: 10,\n    color: 'black',\n    fontSize: 15,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman',\n  },\n  buttonText2: {\n    color: 'black',\n    fontSize: 20,\n    marginLeft: 20,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman',\n    paddingHorizontal: 20,\n    // paddingTop: 10, //only use with Avenir-roman\n  },\n  contentContainer: {\n    paddingTop: 0,\n  },\n  titleContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  titleImage: {\n    width: 200,\n    height: 200,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  tabBarInfoContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'black',\n        shadowOffset: { width: 0, height: -3 },\n        shadowOpacity: 0.1,\n        shadowRadius: 3,\n      },\n      android: {\n        elevation: 20,\n      },\n    }),\n    alignItems: 'center',\n    backgroundColor: '#fbfbfb',\n    paddingVertical: 20,\n  },\n  tabBarInfoText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    textAlign: 'center',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\n\nexport default function AboutScreen() {\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n\n    <Text style={styles.titleText}>\n        About\n    </Text>\n\n    <Text style={styles.optionText}>\nThank you for downloading the Covid-19 Pocket Reference App! {'\\n'} {'\\n'}\nThis is intended to provide healthcare providers with easily accessible information during the COVID19 pandemic. \n{'\\n'}{'\\n'}This app provide resources for clinicians on relevant up-to-date information of COVID19 and hospital protocols for PPE usage and ventilation. \n\n  </Text>\n    </ScrollView>\n  )\n}\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n  return (\n    <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n      <View style={{ flexDirection: 'row' }}>\n        <View style={styles.optionIconContainer}>\n          <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n        </View>\n        <View style={styles.optionTextContainer}>\n          <Text style={styles.optionText}>{label}</Text>\n        </View>\n      </View>\n    </RectButton>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  titleText: {\n    marginTop: 30,\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman'\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n  optionText: {\n    fontSize: 20,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n    paddingHorizontal: 15,\n    // fontFamily: 'Avenir-roman'\n  },\n});\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport * as React from 'react';\n\nimport TabBarIcon from '../components/TabBarIcon';\nimport HomeScreen from '../screens/HomeScreen';\nimport AboutScreen from '../screens/AboutScreen';\n\nconst BottomTab = createBottomTabNavigator();\nconst INITIAL_ROUTE_NAME = 'Home';\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({ headerTitle: getHeaderTitle(route) });\n\n  return (\n    <BottomTab.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-home\" />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"About\"\n        component={AboutScreen}\n        options={{\n          title: 'About',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-book\" />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nfunction getHeaderTitle(route) {\n  const routeName = route.state?.routes[route.state.index]?.name ?? INITIAL_ROUTE_NAME;\n\n  switch (routeName) {\n    case 'Home':\n      return '';\n    case 'About':\n      return '';\n  }\n}\n","\nimport React from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\n\nexport default function MyButton(props) {\n  const navigation = useNavigation();\n\n  return (\n    <TouchableOpacity\n      style={[{ backgroundColor: props.color }, styles.buttonStyle]}\n      onPress={() => {\n        switch (props.content) {\n          case \"CPRContent\":\n            navigation.navigate(\"CPRContent\", {\n              name: props.name,\n              data: props.data,\n            });\n            break;\n          case \"Buttonscreen\":\n            navigation.navigate(\"Buttonscreen\", {\n              name: props.name,\n              data: props.data,\n              color: props.color,\n              page: props.page,\n              nextScreen: props.nextScreen,\n            });\n            break;\n          case \"Ventilator\":\n            navigation.navigate(\"Ventilator\", {\n              name: props.name,\n              data: props.data,\n            });\n            break;\n          case \"Video Tutorial\":\n            navigation.navigate(\"Video Tutorial\", {\n              name: props.name,\n              data: props.data,\n            });\n            break;\n        }\n      }}\n    >\n      <Text style={styles.buttonText}>{props.name}</Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonStyle: {\n    flexDirection: \"row\",\n    marginVertical: 8,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 350,\n    height: 90,\n    borderRadius: 20,\n    shadowColor: \"rgba(0,0,0, .4)\", // IOS\n    shadowOffset: { height: 1, width: 0 }, // IOS\n    shadowOpacity: 1, // IOS\n    shadowRadius: 1, //IOS\n    elevation: 1, // Android\n    // fontFamily: \"Avenir-roman\",\n    textAlign: \"center\",\n  },\n  buttonText: {\n    paddingHorizontal: 20,\n    // paddingTop: 10, //use with Avenir-roman only\n    color: \"black\",\n    fontSize: 24,\n    // fontFamily: \"Avenir-roman\",\n    textAlign: \"center\",\n    lineHeight: 28,\n  },\n});","import React, { useEffect, useState } from \"react\";\nimport { Image, StyleSheet, Text, View } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport MyButton from \"../components/MyButton\";\nimport { db } from \"../config\";\n\nexport default function ClinicianScreen({ navigation }) {\n  const [cprData, setData] = useState({});\n\n  async function getData() {\n    try {\n      const snapshot = await db.ref(\"categories/\").once(\"value\");\n      let data = snapshot.val();\n      setData(data);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function createButtons() {\n    let buttonList = new Array(Object.keys(cprData).length);\n    Object.entries(cprData).map(([key, value]) => {\n      let name = key.replace(/_/g, \" \");\n      buttonList[value.order] =  \n        <MyButton name={name} color={value.color} data={key} key={key} page={'cpr/'} nextScreen={'CPRContent'} content = 'Buttonscreen' />\n      \n    });\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>\n            Clinician {\"\\n\"} Pocket Reference\n          </Text>\n          <Image\n            source={require(\"../assets/images/clinician.png\")}\n            style={styles.titleImage}\n          />\n          {createButtons()}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  titleText: {\n    marginTop: 30,\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: 'Avenir-roman',\n  },\n  titleImage: {\n    width: 150,\n    height: 150,\n    resizeMode: \"contain\",\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Image, StyleSheet, Text, View } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport MyButton from \"../components/MyButton\";\nimport { db } from \"../config\";\n\nexport default function VideoTutorialsScreen({navigation}) {\n  const [tutorData, setData] = useState({});\n\n  async function getData() {\n    try {\n      const snapshot = await db.ref('video_tutorial/Tutorial_Categories/').once(\"value\");\n      let data = snapshot.val();\n      setData(data);\n\n      //console.log(data);\n\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function createButtons() {\n    let buttonList = new Array(Object.keys(tutorData).length);\n    Object.entries(tutorData).map(([key, value]) => {\n      let name = key.replace(/_/g, \" \");\n      buttonList[value.order] =  \n        <MyButton name={name} color={value.color} key={key} data={key} content='Video Tutorial' />\n        \n    });\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>\n            Just-In-Time{\"\\n\"}Video Tutorials\n          </Text>\n          <Image\n            source={require(\"../assets/images/PPE.png\")}\n            style={styles.titleImage}\n          />\n          {createButtons()}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  titleText: {\n    marginTop: 30,\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: 'Avenir-roman',\n  },\n  titleImage: {\n    width: 150,\n    height: 150,\n    resizeMode: \"contain\",\n  },\n});\n\n","import React, {useRef, useState} from 'react';\nimport { View, StyleSheet, Platform } from \"react-native\";\nimport YoutubePlayer from 'react-native-youtube-iframe';\n\nexport default function MyVideo(props) {\n  return Platform.OS == \"web\" ? webVideo(props) : appVideo(props);\n}\n\nfunction appVideo(props) {\n  const playerRef = useRef(null);\n  const [playing, setPlaying] = useState(true);\n  return (\n    <View style={styles.contentContainer}>\n      <YoutubePlayer\n        ref={playerRef}\n        height={300}\n        width={400}\n        videoId={props.video}\n        play={playing}\n        onChangeState={event => console.log(event)}   \n        onReady={() => console.log(\"ready\")}\n        onError={e => console.log(e)}\n        onPlaybackQualityChange={q => console.log(q)}\n        volume={50}\n        playbackRate={1}\n        playerParams={{\n          cc_lang_pref: \"us\",\n          showClosedCaptions: true\n        }}\n      />\n    </View>\n  );\n}\n\nfunction webVideo(props) {\n  let uri = \"https://www.youtube.com/embed/\" + props.video;\n  return (\n    <View styles={styles.contentContainer}>\n      <div style=\"align:center;\">\n        <iframe\n          width=\"400\" \n          height=\"300\" \n          src={uri}\n          frameborder=\"0\" \n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n          allowfullscreen>\n        </iframe>\n      </div>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    margin: 3.5,\n    alignItems: 'center'\n  },\n});\n\n","import React, { useEffect, useState } from \"react\";\nimport { Image, StyleSheet, Text, View} from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport MyVideo from \"../components/MyVideoForTutorial\";\nimport { db } from \"../config\";\n\nexport default function VideoTutorial({route}) {\n  const { name } = route.params;\n  const { data } = route.params;\n\n  const [videoData, setData] = useState({});\n\n  async function getData() {\n    try {\n      const snapshot = await db.ref(\"video_tutorial/tutorials/\" + data).once(\"value\");\n      let snap = snapshot.val();\n      setData(snap);\n\n      // console.log(data)\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function createObjects() {\n    let k = 0; //for unique keys to get rid of warnings\n\n    let componentsList = [];\n    Object.entries(videoData).map(([key, value]) => {\n      switch (value.type) {\n        case \"video\":\n          componentsList.push(\n            <View key={k++}>\n              <MyVideo video={value.content}/>\n            </View>\n          );\n        break;\n      }\n    });\n    return componentsList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>{name}</Text>\n        </View>\n        <View style={styles.contentContainer}>{createObjects()}</View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffff',\n  },\n  subtitleText: {\n    fontSize: 20,\n    // padding: 15,\n    paddingBottom: 20,\n    alignSelf: 'center'\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    margin: 20,\n  },\n  titleText: {\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: \"Avenir-roman\",\n  },\n  image: {\n    flex: 1,\n    width: undefined,\n    height: undefined,\n    aspectRatio: 1,\n    resizeMode: \"contain\",\n  },\n  contentContainer: {\n    flex: 1,\n    margin: 3.5,\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\n\nexport default function ResourcesScreen() {\n  return (\n\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n    <Text style={styles.titleText}>Resources</Text>   \n    <Text style={styles.subtitleText}>Useful Links</Text>  \n      <OptionButton\n        icon=\"md-link\"\n        label=\"Hospital Epidemiology and Infection Control (HEIC) Intranet\"\n        onPress={() => WebBrowser.openBrowserAsync('https://www.hopkinsmedicine.org/heic/')}\n      />\n      <OptionButton\n        icon=\"md-link\"\n        label=\"Center for Disease Control and Prevention\"\n        onPress={() => WebBrowser.openBrowserAsync('https://www.cdc.gov/')}\n        isLastOption\n      />\n\n      <OptionButton\n        icon=\"md-link\"\n        label=\"Hopkins Training Journal Clubs\"\n        onPress={() => WebBrowser.openBrowserAsync('http://anesthesiology.hopkinsmedicine.org/adult-critical-care/adult-critical-care-fellowship/covid-journal-clubs/')}\n        isLastOption\n      />\n\n      <OptionButton\n        icon=\"md-link\"\n        label=\"Hopkins COVID-ED\"\n        onPress={() => WebBrowser.openBrowserAsync('https://livejohnshopkins.sharepoint.com/sites/COVID-ED/SitePages/ICU-IMC-Training-%26-Resources.aspx')}\n        isLastOption\n      />\n\n      <OptionButton\n        icon=\"md-link\"\n        label=\"Coronavirus Resources Center\"\n        onPress={() => WebBrowser.openBrowserAsync('https://coronavirus.jhu.edu/')}\n        isLastOption\n      />\n\n      <OptionButton\n        icon=\"md-link\"\n        label=\"ICU Training for Non-ICU Physicians\"\n        onPress={() => WebBrowser.openBrowserAsync('https://covid19.sccm.org/')}\n        isLastOption\n      />\n    <Text style={styles.subtitleText}>Feedback</Text> \n    <OptionButton\n        icon=\"md-list\"\n        label=\"Comments or suggestions\"\n        onPress={() => WebBrowser.openBrowserAsync('https://docs.google.com/forms/d/e/1FAIpQLSeKC3seFS0pgsmH4vSkr8XCpzPq4VpmWTwzGGRDlL88krpy8g/viewform?usp=sf_link')}\n        isLastOption\n      />\n    </ScrollView>\n\n  )\n}\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n  return (\n    <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n      <View style={{ flexDirection: 'row' }}>\n        <View style={styles.optionIconContainer}>\n          <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n        </View>\n        <View style={styles.optionTextContainer}>\n          <Text style={styles.optionText}>{label}</Text>\n        </View>\n      </View>\n    </RectButton>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  titleText: {\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    // fontFamily: 'Avenir-roman'\n  },\n  subtitleText: {\n    marginHorizontal: 15,\n    marginBottom: 10,\n    fontSize: 20,\n    alignSelf: 'flex-start',\n    fontWeight: 'bold',\n    // fontFamily: 'Avenir-roman'\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    marginBottom: 10,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n    paddingHorizontal: 5,\n    //fontFamily: 'Avenir-roman'\n  },\n});","import React, {useEffect, useState }  from \"react\";\nimport {StyleSheet, Text, View } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport MyButton from \"./MyButton\";\nimport { db } from \"../config\";\n\n\nexport default function ButtonScreen({ route, navigation }) {\n  const { name } = route.params;\n  const { data } = route.params;\n  const { color } = route.params;\n  const { page } = route.params;\n  const { nextScreen } = route.params;\n  \n  const [pageData, setData] = useState({});\n\n  async function getData() {\n    const path = ''.concat(page, data);\n    try {\n      const snapshot = await db.ref(path).once(\"value\");\n      let data = snapshot.val();\n      setData(data)\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function createButtons() {\n    let buttonList = [];\n    Object.entries(pageData).map(([key, value]) => {\n        let title = key.replace(/_/g, \" \");\n        buttonList.push(<MyButton name={title} data = {value} color={color} key={key} content={nextScreen}/>);\n    })\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>\n            {name}\n          </Text>\n          {createButtons()}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  titleText: {\n    marginTop: 30,\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: \"center\",\n  },\n  titleImage: {\n    width: 150,\n    height: 150,\n    resizeMode: \"contain\",\n  },\n});","import React, { Component } from \"react\";\nimport { View, TouchableOpacity, Text, StyleSheet, Image } from \"react-native\";\nimport CheckBox from \"react-native-check-box\";\n\n\nexport default class MyCheckbox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: false,\n    };\n  }\n\n  render() {\n    return (\n      <View>\n        <CheckBox\n          style={{flex: 1, paddingLeft: this.props.offset}}\n          rightText={this.props.data}\n          rightTextStyle = {styles.text}\n\n          onClick={() => {\n            this.setState({\n              isChecked: !this.state.isChecked,\n            });\n          }}\n          isChecked={this.state.isChecked}\n          \n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 18,\n  },\n});\n\n","import React from \"react\";\nimport { Image, Dimensions, StyleSheet, View, Platform } from \"react-native\";\nimport ImageZoom from \"react-native-image-pan-zoom\";\nimport ImageModal from \"react-native-image-modal\";\nimport { Props } from \"react-native-image-pan-zoom/built/image-zoom/image-zoom.type\";\n\nlet windowHeight = Dimensions.get(\"window\").height;\nlet windowWidth = Dimensions.get(\"window\").width;\nexport default function MyImage(props) {\n  return Platform.OS == \"web\" ? webImage(props) : appImage(props);\n}\n\nfunction webImage(props) {\n  return (\n    <View styles={styles.container}>\n      <ImageZoom\n        cropWidth={windowWidth - 50}\n        cropHeight={windowHeight - 50}\n        imageWidth={windowWidth - 50}\n        imageHeight={windowHeight - 50}\n      >\n        <Image\n          style={styles.image}\n          source={{\n            uri: props.uri,\n          }}\n        />\n      </ImageZoom>\n    </View>\n  );\n}\n\nfunction appImage(props) {\n  return (\n    <View styles={styles.container}>\n      <ImageModal\n        resizeMode=\"contain\"\n        imageBackgroundColor={props.backgroundColor}\n        style={{\n          width: windowWidth - 50,\n          height: 350,\n        }}\n        source={{\n          uri: props.uri,\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  image: {\n    flex: 1,\n    // width: windowWidth,\n    // height: undefined,\n    // aspectRatio: 1,\n    // margin: 20,\n    // alignItems: 'center',\n    resizeMode: \"contain\",\n  },\n});\n","import React, { Component } from \"react\";\nimport { View, TouchableOpacity, Text, StyleSheet, Image } from \"react-native\";\nimport Icon from \"react-native-vector-icons/MaterialIcons\";\nimport { Ionicons } from '@expo/vector-icons';\nimport PropTypes from \"prop-types\";\nimport {RectButton } from \"react-native-gesture-handler\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport MyImage from './MyImage';\nimport MyCheckbox from './MyCheckbox';\n\nexport default class Accordion extends Component {\n  // Specifies the default values for props:\n  static propTypes = {\n    colorRow: PropTypes.string,\n    colorChild: PropTypes.string,\n  };\n  static defaultProps = {\n    colorRow: \"#A9A9A9\",\n    colorChild: \"#DCDCDC\",\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      expanded: false,\n    };\n  }\n\n  render() {\n    let componentsList = [];\n    let k = 0;\n\n    const bulletPoint = (value, padding) => {\n      const list = value.content.split(\"#\");\n      list.map((item) => {\n        componentsList.push(\n          <View\n            key={k++}\n            style={{ flexDirection: \"row\", paddingLeft: padding }}\n          >\n            <Text style={styles.text}>{\"\\u2022\"}</Text>\n            <Text style={[{ flex: 1, paddingLeft: 5 }, styles.text]}>\n              {item}\n            </Text>\n          </View>\n        );\n      });\n    };\n    function checkboxes(value, offset) {\n      const list = value.content.split(\"#\");\n      list.map((item) => {\n        componentsList.push(\n          <View key={k++} style={{paddingTop: (offset == 0) ? 20 : 0}}>\n            <MyCheckbox data={item} offset={offset}></MyCheckbox>\n          </View>\n        );\n      });\n    }\n\n    function createObjects(data) {\n      Object.entries(data).map(([key, value]) => {\n        switch (value.type) {\n          case \"text\":\n            componentsList.push(\n              <Text\n                key={k++}\n                style={[{ fontWeight: value.fontWeight }, styles.text]}\n              >\n                {value.content + \"\\n\"}\n              </Text>\n            );\n            break;\n          case \"mainBullet\":\n            bulletPoint(value, 0);\n            break;\n          case \"subBullet\":\n            bulletPoint(value, 20);\n            break;\n          case \"mainCheckbox\":\n            checkboxes(value, 0);\n            break;\n          case \"subCheckbox\":\n            checkboxes(value, 20);\n            break;\n            case \"image\":\n              let uri = \"https://firebasestorage.googleapis.com/v0/b/covid-19-ventilator-training.appspot.com/o/images%2FCPRImages%2F\" +\n                value.content +\n                \"?alt=media&token=9b535aac-9275-4cfa-b4f3-552010ab594b\";\n              componentsList.push(\n                <View key={k++} style={styles.contentContainer}>\n                  <MyImage uri={uri} backgroundColor={'#00000'}/> \n                </View>\n              );\n              break;\n          case \"url\":\n            componentsList.push(\n              <View key={k++}>\n                <RectButton\n                  style={styles.option}\n                  onPress={() =>\n                    WebBrowser.openBrowserAsync(value.content.link)\n                  }\n                >\n                  <View style={{ flexDirection: \"row\" }}>\n                    <View style={styles.optionIconContainer}>\n                      <Ionicons\n                        name=\"md-school\"\n                        size={22}\n                        color=\"rgba(0,0,0,0.35)\"\n                      />\n                    </View>\n                    <View style={styles.optionTextContainer}>\n                      <Text style={styles.optionText}>\n                        {value.content.title}\n                      </Text>\n                    </View>\n                  </View>\n                </RectButton>\n              </View>\n            );\n            break;\n        }\n      });\n      return componentsList;\n    }\n    return (\n      <View>\n        <TouchableOpacity\n          style={[styles.row, { backgroundColor: this.props.colorRow }]}\n          onPress={() => this.toggleExpand()}\n        >\n          <Text style={[styles.title, styles.font]}>{this.props.title}</Text>\n          <Icon\n            name={\n              this.state.expanded ? \"keyboard-arrow-up\" : \"keyboard-arrow-down\"\n            }\n            size={30}\n            color={\"#ffff\"}\n          />\n        </TouchableOpacity>\n        <View style={styles.parentHr} />\n        {this.state.expanded && (\n          <View\n            style={[styles.child, { backgroundColor: this.props.colorChild }]}\n          >\n            {createObjects(this.state.data)}\n          </View>\n        )}\n      </View>\n    );\n  }\n\n  toggleExpand = () => {\n    this.setState({ expanded: !this.state.expanded });\n  };\n}\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#ffff\",\n  },\n  row: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    height: 56,\n    paddingLeft: 25,\n    paddingRight: 18,\n    alignItems: \"center\",\n    backgroundColor: \"#7ED551\",\n  },\n  parentHr: {\n    height: 1,\n    color: \"#7645\",\n    width: \"100%\",\n  },\n  child: {\n    backgroundColor: \"#bcf2a0\",\n    padding: 16,\n  },\n  text: {\n    fontSize: 18,\n    // fontFamily: \"Avenir-roman\",\n  },\n  contentContainer: {\n    flex: 1,\n    padding: 0,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: \"#fdfdfd\",\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: \"#ededed\",\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    marginBottom: 10,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: \"flex-start\",\n    marginTop: 1,\n    paddingHorizontal: 15,\n  },\n});\n","import React from \"react\";\nimport { StyleSheet, Text, View, Image, Dimensions, Platform} from \"react-native\";\nimport { ScrollView, RectButton } from \"react-native-gesture-handler\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport MyCheckbox from \"./MyCheckbox\";\nimport Accordion from \"./Accordion\";\nimport MyImage from \"../components/MyImage\";\n\nexport default function CPRContent({ route }) {\n  const { name } = route.params;\n  const { data } = route.params;\n\n  //create list of objects using a switch statement on the type of component we want to render\n  function createObjects() {\n    let k = 0; //for unique keys to get rid of warnings\n    let componentsList = [];\n\n    function bulletPoints(value, offset) {\n      const list = value.content.split(\"#\");\n      list.map((item) => {\n        componentsList.push(\n          <View key={k++} style={{ flexDirection: \"row\", paddingLeft: offset, paddingTop: (offset == 0) ? 20 : 0}}>\n            <Text style={styles.text}>{\"\\u2022\"}</Text>\n            <Text style={[{ flex: 1, paddingLeft: 5 }, styles.text]}>\n              {item}\n            </Text>\n          </View>\n        );\n      });\n    }\n    function checkboxes(value, offset) {\n      const list = value.content.split(\"#\");\n      list.map((item) => {\n        componentsList.push(\n          <View key={k++} style={{paddingTop: (offset == 0) ? 20 : 0}}>\n            <MyCheckbox data={item} offset={offset}></MyCheckbox>\n          </View>\n        );\n      });\n    }\n\n    Object.entries(data).map(([key, value]) => {\n      switch (value.type) {\n        case \"text\":\n          componentsList.push(\n            <Text\n              key={k++}\n              style={[{ fontWeight: value.fontWeight }, styles.text]}\n            >\n              {value.content + \"\\n\"}\n            </Text>\n          );\n          break;\n        case \"mainBullet\":\n          bulletPoints(value, 0);\n          break;\n        case \"subBullet\":\n          bulletPoints(value, 20);\n          break;\n        case \"subsubBullet\":\n          bulletPoints(value, 40);\n          break;\n        case \"mainCheckbox\":\n          Platform.OS === \"web\" ? bulletPoints(value, 0) : checkboxes(value, 0);\n          break;\n        case \"subCheckbox\":\n          Platform.OS === \"web\" ? bulletPoints(value, 20) : checkboxes(value, 40);\n          break;\n        case \"image\":\n          let uri =\n            \"https://firebasestorage.googleapis.com/v0/b/covid-19-ventilator-training.appspot.com/o/images%2FCPRImages%2F\" +\n            value.content +\n            \"?alt=media&token=9b535aac-9275-4cfa-b4f3-552010ab594b\";\n          componentsList.push(\n            <View key={k++} style={styles.contentContainer}>\n              <MyImage uri={uri} backgroundColor={'#fffff'}/>\n\n            </View>\n          );\n          break;\n        case \"accordion\":\n          componentsList.push(\n            <View key={k++} style={styles.contentContainer}>\n              <Accordion title={value.title} data={value.content}></Accordion>\n            </View>\n          );\n          break;\n        case \"url\":\n          componentsList.push(\n            <View key={k++}>\n              <RectButton\n                style={styles.option}\n                onPress={() => WebBrowser.openBrowserAsync(value.content.link)}\n              >\n                <View style={{ flexDirection: \"row\" }}>\n                  <View style={styles.optionIconContainer}>\n                    <Ionicons\n                      name=\"md-school\"\n                      size={22}\n                      color=\"rgba(0,0,0,0.35)\"\n                    />\n                  </View>\n                  <View style={styles.optionTextContainer}>\n                    <Text style={styles.optionText}>{value.content.title}</Text>\n                  </View>\n                </View>\n              </RectButton>\n            </View>\n          );\n          break;\n      }\n    });\n    return componentsList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.scrollContainer}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>{name}</Text>\n        </View>\n        <View style={styles.contentContainer}>{createObjects()}</View>\n      </ScrollView>\n    </View>\n  );\n}\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  scrollContainer: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    padding: 10,\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    margin: 20,\n  },\n  titleText: {\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: \"Avenir-roman\",\n  },\n  image: {\n    flex: 1,\n    width: undefined,\n    height: undefined,\n    aspectRatio: 1,\n    resizeMode: \"contain\",\n  },\n  text: {\n    fontSize: 18,\n    // fontFamily: \"Avenir-roman\",\n  },\n  contentContainer: {\n    // flex: 1,\n    alignContent: \"center\",\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: \"#fdfdfd\",\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: \"#ededed\",\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    marginBottom: 10,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: \"flex-start\",\n    marginTop: 1,\n    paddingHorizontal: 15,\n  },\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Image, StyleSheet, Text, View } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport MyButton from \"../components/MyButton\";\nimport { db } from \"../config\";\n\nexport default function VentilationScreen({ navigation }) {\n  const [ventData, setData] = useState({});\n\n  async function getData() {\n    try {\n      const snapshot = await db.ref(\"Ventilator_Categories/\").once(\"value\");\n      let data = snapshot.val();\n      setData(data);\n\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function createButtons() {\n    let buttonList = new Array(Object.keys(ventData).length);\n    Object.entries(ventData).map(([key, value]) => {\n      let name = key.replace(/_/g, \" \");\n      buttonList[value.order] =  \n        <MyButton name={name} color={value.color} data={key} key={key} page={'ventilators/'} nextScreen={'Ventilator'} content = 'Buttonscreen' />\n      \n    });\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>\n            Ventilator Model {\"\\n\"}Reference\n          </Text>\n          <Image\n            source={require(\"../assets/images/ventilator.png\")}\n            style={styles.titleImage}\n          />\n          {createButtons()}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  titleText: {\n    marginTop: 30,\n    marginBottom: 30,\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: 'Avenir-roman',\n  },\n  titleImage: {\n    width: 150,\n    height: 150,\n    resizeMode: \"contain\",\n  },\n});\n","import React, {useRef, useState} from 'react';\nimport { View, StyleSheet, TouchableOpacity, Text, ScrollView, Platform } from \"react-native\";\nimport YoutubePlayer from 'react-native-youtube-iframe';\n\nexport default function MyVideo(props) {\n  return Platform.OS == \"web\" ? webVideo(props) : appVideo(props);\n}\n\nfunction appVideo(props) {\n  const playerRef = useRef(null);\n  const [playing, setPlaying] = useState(true);\n\n  let timestamps = props.timestamps;\n\n  function createButtonsApp() {\n    let k = 0;\n    let buttonList = new Array(Object.keys(timestamps).length);\n\n    Object.entries(timestamps).map(([key, value]) => {\n      let timeStamp = value.skipTo;\n      let order = value.order;\n      let buttonName = key.replace(/_/g, \" \");\n      buttonList[order] =\n        <TouchableOpacity\n          key={k++}\n          style={styles.buttonStyle}\n          onPress={() => {\n            playerRef.current.seekTo(timeStamp);\n          }}\n        >\n          <Text style={styles.buttonText}>{buttonName}</Text>\n        </TouchableOpacity>;\n    });\n    return buttonList;\n  }\n\n  return (\n    <View style={styles.contentContainer}>\n      <ScrollView>\n        <YoutubePlayer\n          ref={playerRef}\n          height={260}\n          width={400}\n          videoId={props.video}\n          play={playing}\n          onChangeState={event => console.log(event)}   \n          onReady={() => console.log(\"ready\")}\n          onError={e => console.log(e)}\n          onPlaybackQualityChange={q => console.log(q)}\n          volume={50}\n          playbackRate={1}\n          playerParams={{\n            cc_lang_pref: \"us\",\n            showClosedCaptions: true\n          }}\n        />\n        {createButtonsApp()}\n      </ScrollView>\n    </View>\n  );\n}\n\nfunction webVideo(props) {\n  let uri = \"https://www.youtube.com/embed/\" + props.video;\n  let timestamps = props.timestamps;\n\n  function createButtonsWeb() {\n    let k = 0;\n    let buttonList = new Array(Object.keys(timestamps).length);\n\n    Object.entries(timestamps).map(([key, value]) => {\n      let timeStamp = value.skipTo;\n      let order = value.order;\n      let buttonName = key.replace(/_/g, \" \");\n      buttonList[order] =\n        <TouchableOpacity\n          key={k++}\n          style={styles.buttonStyle}\n          onPress={() => {\n            playerRef.current.seekTo(timeStamp);\n          }}\n        >\n          <Text style={styles.buttonText}>{buttonName}</Text>\n        </TouchableOpacity>;\n    });\n    return buttonList;\n  }\n\n  //{createButtonsWeb()}\n\n  return (\n    <View styles={styles.contentContainer}>\n      <ScrollView>\n        <div style=\"margin:3.5;flex:1;alignItems:center;\">\n          <iframe \n            width=\"400\" \n            height=\"300\" \n            src={uri}\n            frameborder=\"0\" \n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n            allowfullscreen>\n          </iframe>\n        </div>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    margin: 3.5,\n    alignItems: 'center',\n  },\n  buttonStyle: {\n    flexDirection: 'row',\n    marginVertical: 8,\n    alignSelf: 'center',\n    alignItems:'center',\n    justifyContent:'flex-start',\n    width:300,\n    height:70,\n    backgroundColor: '#F2F2F2',\n    borderRadius:20,\n    shadowColor: 'rgba(0,0,0, .4)', // IOS\n    shadowOffset: { height: 1, width: 0 }, // IOS\n    shadowOpacity: 1, // IOS\n    shadowRadius: 1, //IOS\n    elevation: 1, // Android\n  },\n  buttonText: {\n    color: 'black',\n    fontSize: 20,\n    textAlign: 'center',\n    // fontFamily: 'Avenir-roman',\n    paddingHorizontal: 20,\n    paddingTop: 10,\n  },\n});\n\n","import * as React from 'react';\nimport { Image, StyleSheet, Text, View} from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport MyVideo from \"../components/MyVideoForVent\";\nimport MyImage from \"../components/MyImage\";\n\n//var ventPicSrc; //source for vent picture\n\nexport default function Ventilator({route}) {\n  const { name } = route.params;\n  const { data } = route.params;\n\n  //const namePath = (name.split(' ').join('_') + \"_Quick_Guide.png\");\n  //fetchQRGuidePic(namePath);\n\n  function createObjects() {\n    let k = 0; //for unique keys to get rid of warnings\n\n    let componentsList = [];\n    Object.entries(data).map(([key, value]) => {\n      switch (value.type) {\n        case \"image\":\n          let uri = \"https://firebasestorage.googleapis.com/v0/b/covid-19-ventilator-training.appspot.com/o/images%2FQwikRefGuide%2F\" + \n            value.content +\n            \"?alt=media&token=1cdcded1-d887-412e-b632-62a4dc92b3bc\";\n          componentsList.push(\n            <View key={k++}>\n              <MyImage uri={uri}/>\n            </View>\n          );\n          break;\n        case \"video\":\n          let video = value.content.video;\n          let timestamps = value.content.timestamps;\n          componentsList.push(\n            <View key={k++}>\n              <MyVideo video={video} timestamps={timestamps}/>\n            </View>\n          );\n        break;\n      }\n    });\n    return componentsList;\n  }\n\n  //source={{uri: ventPicSrc}} -->proper method of doing this but issues due to async\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.titleText}>{name}</Text>\n        </View>\n        <View style={styles.contentContainer}>{createObjects()}</View>\n      </ScrollView>\n    </View>\n  );\n}\n\n\n/*function fetchQRGuidePic (namePath) { //fetch quick reference guide picture\n  var imgPath = app.storage().ref(\"/images/QwikRefGuide/\"); //google storage route\n  var ventRef = imgPath.child(namePath);//add name of ventilator\n  ventRef.getDownloadURL().then(function(url) {\n  ventPicSrc = url;\n});}*/\n\n//Styling\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n  titleContainer: {\n    alignItems: \"center\",\n    marginHorizontal: 20,\n    marginTop: 20,\n  },\n  titleText: {\n    fontSize: 36,\n    textAlign: \"center\",\n    // fontFamily: \"Avenir-roman\",\n  },\n  image: {\n    flex: 1,\n    width: undefined,\n    height: undefined,\n    aspectRatio: 1,\n    resizeMode: \"contain\",\n  },\n  contentContainer: {\n    flex: 1,\n    // margin: 3.5,\n  },\n});\n\n","import * as React from \"react\";\nimport { Platform, StatusBar, StyleSheet, View } from \"react-native\";\nimport { SplashScreen } from \"expo\";\nimport * as Font from \"expo-font\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport useLinking from \"./navigation/useLinking\";\n\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ClinicianScreen from \"./screens/ClinicianScreen\";\n\nimport VideoTutorialsScreen from \"./screens/VideoTutorialsScreen\";\nimport VideoTutorial from \"./components/VideoTutorial\";\n\nimport ResourcesScreen from \"./screens/ResourcesScreen\";\n\nimport ButtonScreen from \"./components/ButtonScreen\";\nimport CPRContent from \"./components/CPRContent\";\n\nimport VentilationScreen from \"./screens/VentilationScreen\";\nimport Ventilator from \"./components/Ventilator\";\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          \"space-mono\": require(\"./assets/fonts/SpaceMono-Regular.ttf\"),\n           //Google FiraSans\n          \"FiraSans-italic\": require(\"./assets/fonts/FiraSans-Italic.ttf\"),\n          \"FiraSans-regular\": require(\"./assets/fonts/FiraSans-Regular.ttf\"),\n          \"FiraSans-boldItalic\": require(\"./assets/fonts/FiraSans-BoldItalic.ttf\"),\n          \"FiraSans-bold\": require(\"./assets/fonts/FiraSans-Bold.ttf\"),\n          \"FiraSans-medium\": require(\"./assets/fonts/FiraSans-Medium.ttf\"),\n          \"FiraSans-mediumItalic\": require(\"./assets/fonts/FiraSans-MediumItalic.ttf\"),\n          //Avenir Fonts\n          \"Avenir-black\": require(\"./assets/fonts/AvenirLTStd-Black.otf\"), //avenir fonts\n          \"Avenir-book\": require(\"./assets/fonts/AvenirLTStd-Book.otf\"), //avenir fonts\n          \"Avenir-roman\": require(\"./assets/fonts/AvenirLTStd-Roman.otf\"), //avenir fonts\n\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  Platform.OS === \"ios\" && <StatusBar barStyle=\"dark-content\" />;\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        <StatusBar barStyle=\"dark-content\"/>\n        <NavigationContainer\n          ref={containerRef}\n          initialState={initialNavigationState}\n        >\n          <Stack.Navigator>\n            <Stack.Screen name=\"About\" component={BottomTabNavigator} />\n            <Stack.Screen name=\"Home\" component={BottomTabNavigator} />\n            <Stack.Screen\n              name=\"Clinician Pocket Reference\"\n              component={ClinicianScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Ventilation\"\n              component={VentilationScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Tutorscreen\"\n              component={VideoTutorialsScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Resources\"\n              component={ResourcesScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Buttonscreen\"\n              component={ButtonScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"CPRContent\"\n              component={CPRContent}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Ventscreen\"\n              component={VentilationScreen}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Ventilator\"\n              component={Ventilator}\n              options={{\n                title: null,\n              }}\n            />\n            <Stack.Screen\n              name=\"Video Tutorial\"\n              component={VideoTutorial}\n              options={{\n                title: null,\n              }}\n            />\n            \n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n  },\n});\n","import { useLinking } from '@react-navigation/native';\nimport { Linking } from 'expo';\n\nexport default function(containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n      Root: {\n        path: 'root',\n        screens: {\n          Home: 'home',\n          Links: 'links',\n          Settings: 'settings',\n        },\n      },\n    },\n  });\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/splash.20b8829e.png\";","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-Italic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-BoldItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-Medium.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/FiraSans-MediumItalic.ttf\";","module.exports = \"data:font/otf;base64,\"","module.exports = \"data:font/otf;base64,\"","module.exports = \"data:font/otf;base64,\""],"sourceRoot":""}