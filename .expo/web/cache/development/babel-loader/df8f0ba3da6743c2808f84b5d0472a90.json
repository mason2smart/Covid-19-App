{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/laurachicos/Desktop/COVID/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport useLinking from \"./navigation/useLinking\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ClinicianScreen from \"./screens/ClinicianScreen\";\nimport EpidemiologyScreen from \"./screens/EpidemiologyScreen\";\nimport RecognitionScreen from \"./screens/RecognitionScreen\";\nimport TreatmentScreen from \"./screens/TreatmentScreen\";\nimport VentilationScreen from \"./screens/VentilationScreen\";\nimport PPEScreen from \"./screens/PPEScreen\";\nimport ResourcesScreen from \"./screens/ResourcesScreen\";\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: BottomTabNavigator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Clinician Pocket Reference\",\n      component: ClinicianScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Epidemiology\",\n      component: EpidemiologyScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Recognition\",\n      component: RecognitionScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Treatment\",\n      component: TreatmentScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Ventilation\",\n      component: VentilationScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"PPE\",\n      component: PPEScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Resources\",\n      component: ResourcesScreen,\n      options: {\n        title: null\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["/Users/laurachicos/Desktop/COVID/App.js"],"names":["React","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","BottomTabNavigator","useLinking","HomeScreen","ClinicianScreen","EpidemiologyScreen","RecognitionScreen","TreatmentScreen","VentilationScreen","PPEScreen","ResourcesScreen","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","title","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport useLinking from './navigation/useLinking';\n\nimport HomeScreen from './screens/HomeScreen';\n\nimport ClinicianScreen from './screens/ClinicianScreen';\nimport EpidemiologyScreen from './screens/EpidemiologyScreen';\nimport RecognitionScreen from './screens/RecognitionScreen';\nimport TreatmentScreen from './screens/TreatmentScreen';\n\nimport VentilationScreen from './screens/VentilationScreen';\nimport PPEScreen from './screens/PPEScreen';\nimport ResourcesScreen from './screens/ResourcesScreen';\n\nconst Stack = createStackNavigator(); \n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n            {/* <Stack.Screen name=\"Home\" component={HomeScreen} /> */}\n\n            <Stack.Screen name=\"Clinician Pocket Reference\" component={ClinicianScreen} options={{ title: null }}/>\n            <Stack.Screen name=\"Epidemiology\" component={EpidemiologyScreen} options={{ title: null }} />\n            <Stack.Screen name=\"Recognition\" component={RecognitionScreen} options={{ title: null }}/>\n            <Stack.Screen name=\"Treatment\" component={TreatmentScreen} options={{ title: null }}/>\n\n            <Stack.Screen name=\"Ventilation\" component={VentilationScreen} options={{ title: null }}/>\n            <Stack.Screen name=\"PPE\" component={PPEScreen} options={{ title: null }}/>\n            <Stack.Screen name=\"Resources\" component={ResourcesScreen} options={{ title: null }}/>\n            \n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}